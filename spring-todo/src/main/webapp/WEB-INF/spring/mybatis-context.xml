<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 
		Mybatis의 핵심 객체 SqlSessionFactory를 스프링의 빈으로 등록하기
	 -->

	<!-- sqlSession 핵심 객체를 만들내는 Factory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/META-INF/db/mybatis/mybatis-config.xml" />
	</bean>
	
	<!-- 
		MapperFactoryBean은 지정된 매퍼 인터페이스를 구현한 매퍼 객체를 생성한다.
		생성된 매퍼 객체를 스프링의 빈으로 등록한다. 
		
		아래와 같은 서비스객체가 스프링의 빈으로 등록되어 있다면
		MapperFactoryBean이 동적으로 생성해서 스프링에 등록한 UserDao 인터페이스의 구현객체가
		userDao에 주입된다.
		
		xxxServiceImpl implement xxxService {
			@Autowired
			private UserDao; // UserDao인터페이스를 구현한 매퍼객체가 주입된다.
		}
	 -->
	
	<bean class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="kr.co.jhta.todo.dao.UserDao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="kr.co.jhta.todo.dao.TodoDao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

</beans>
